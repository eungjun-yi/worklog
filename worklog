#!env python2

"""Worklog tool"""

import os, sys, re, time
from optparse import OptionParser
from mx import DateTime as mxDateTime
import parsedatetime
from datetime import date, timedelta, datetime
from time import mktime

worklog_formats = {
        ''  : "^(?P<date>[^ ]+)\s+(?P<app>[^ ]+)(\s+(?P<title>.*))?",
        'a2': "^(?P<date>[^ ]+)\s+(?P<ip>[^ ]+)\s+(?P<app>[^ ]+)(\s+(?P<title>.*))?",
        'a3': "^(?P<ap>[^ ]+)\s+(?P<date>[^ ]+)\s+(?P<app>[^ ]+)(\s+(?P<title>.*))?",
        'a4': "^(?P<ip>[^ ]+)\s+(?P<ap>[^ ]+)\s+(?P<date>[^ ]+)\s+(?P<app>[^ ]+)(\s+(?P<title>.*))?",
        }

def parse_lines(lines, request):
    jobs = []
    oldjob = None

    cal = parsedatetime.Calendar()
    in_process = False
    while lines:
        line = lines.pop()

        try:
            format_id = line.split()[0]
        except IndexError:
            continue

        if not worklog_formats.has_key(format_id):
            format_id = ''
        format = worklog_formats[format_id]
        line   = line[len(format_id):].strip()

        try:
            newjob = re.match(format, line).groupdict()
        except AttributeError:
            continue

        if request.has_key('from'):
            try:
                time_struct = cal.parse(newjob['date'])[0]
                d = date(time_struct.tm_year, time_struct.tm_mon, time_struct.tm_mday)
                if d >= request['from'] and d < request['to']:
                    in_process = True
                else:
                    if in_process:
                        break
                    else:
                        continue
            except ValueError:
                pass

        newjob['time'] = 1

        if not oldjob:
            oldjob = newjob
        elif not all(newjob[key] == oldjob[key] for key in ['app', 'title']):
            oldjob['date'] and jobs.append(oldjob)
            oldjob = newjob
        else:
            oldjob['time'] += 1
            oldjob['date'] = newjob['date']

    if oldjob:
        jobs.append(oldjob) # add the last job

    jobs.reverse()

    return jobs

def print_merged_job(merged_job):
    merged_job['total_time_hours'] = merged_job['total_time'] / 60
    merged_job['total_time_mins'] = merged_job['total_time'] % 60
    merged_job['time_hours'] = merged_job['time'] / 60
    merged_job['time_mins'] = merged_job['time'] % 60

    job_format = "%(date)s %(total_time_hours)2dh %(total_time_mins)2dm (%(time_hours)2dh %(time_mins)2dmin) %(propotion)3d%% %(title)s"
    merged_job['propotion'] = merged_job['time'] * 100 / merged_job['total_time']
    print job_format % merged_job

def datetime_from_string(time_str):
    cal = parsedatetime.Calendar()
    time_struct = cal.parse(time_str)[0]
    return datetime(*time_struct[:7])

def print_productivity_report(jobs, keyword):
    interval = 0
    interval_limit = 5
    merged_job = None
    for job in jobs:
        job['apip'] = ' '.join([job[key] for key in ['ap', 'ip'] if job.has_key(key)])
        if job['title'] and keyword in job['title']:
            if merged_job == None:
                merged_job = job
                merged_job['total_time'] = 0
            else:
                merged_job['time'] += job['time']
            merged_job['total_time'] += job['time'] + interval
            interval = 0
        else:
            if merged_job != None:
                time_from = datetime_from_string(merged_job['date']) + timedelta(0, 60 * merged_job['total_time']) 
                time_to = datetime_from_string(job['date'])
                interval += (time_to - time_from + timedelta(0, 60 * job['time'])).seconds / 60
                if interval > interval_limit:
                    print_merged_job(merged_job)
                    merged_job = None
                    interval = 0
    if merged_job != None:
        print_merged_job(merged_job)

def main():
    """main function"""
    parser = OptionParser()
    parser.usage = '%prog [date]'
    parser.usage = '%prog <from-date> <to-date>'
    parser.add_option(
            "-F", "--file", action="store",
            default=os.path.join(os.environ['HOME'], 'work.log'),
            dest="worklog_file", help="specify worklog file")
    parser.add_option(
            "", "--title", action="store",
            dest="keyword", help="keyword to find by title")

    options, args = parser.parse_args()
    worklog_file = options.worklog_file
    keyword = options.keyword

    if not os.path.isfile(worklog_file):
        print 'Cannot find worklog file: ' + worklog_file 
        return 1

    cal = parsedatetime.Calendar()
    request = {}
    if len(args) == 1:
        time_struct = cal.parse(args[0])[0]
        request['from'] = date(time_struct.tm_year, time_struct.tm_mon, time_struct.tm_mday)
        request['to'] = request['from'] + timedelta(days=1)
    elif len(args) == 2:
        time_struct = cal.parse(args[0])[0]
        request['from'] = date(time_struct.tm_year, time_struct.tm_mon, time_struct.tm_mday)
        time_struct = cal.parse(args[1])[0]
        request['to'] = date(time_struct.tm_year, time_struct.tm_mon, time_struct.tm_mday) + timedelta(days=1)

    lines = open(worklog_file).read().split('\n')

    jobs = parse_lines(lines, request)

    if keyword:
        print_productivity_report(jobs, keyword)
    else:
        for job in jobs:
            job['apip'] = ' '.join([job[key] for key in ['ap', 'ip'] if job.has_key(key)])
            print "%(apip)s %(date)s %(time)smin %(app)s %(title)s" % job

    return 0

if __name__ == '__main__':
    exit(main())
